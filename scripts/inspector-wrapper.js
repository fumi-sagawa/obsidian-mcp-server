#!/usr/bin/env node

/**
 * MCP Inspector „É©„ÉÉ„Éë„Éº„Çπ„ÇØ„É™„Éó„Éà
 * 
 * Inspector„ÅÆËµ∑ÂãïÂâç„Å´„Éù„Éº„Éà„ÅÆÁ¢∫Ë™ç„Å®Êó¢Â≠ò„Éó„É≠„Çª„Çπ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíË°å„ÅÑ„Åæ„Åô
 */

import { spawn, execSync } from 'child_process';
import { createServer } from 'net';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __dirname = dirname(fileURLToPath(import.meta.url));

// ‰ΩøÁî®„Åô„Çã„Éù„Éº„Éà
const INSPECTOR_PORT = 6274;
const PROXY_PORT = 6277;

// „Éù„Éº„Éà„Åå‰ΩøÁî®ÂèØËÉΩ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
function isPortAvailable(port) {
  return new Promise((resolve) => {
    const server = createServer();
    
    server.once('error', (err) => {
      if (err.code === 'EADDRINUSE') {
        resolve(false);
      }
    });
    
    server.once('listening', () => {
      server.close();
      resolve(true);
    });
    
    server.listen(port);
  });
}

// „Éù„Éº„Éà„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Çã„Éó„É≠„Çª„Çπ„ÇíÁµÇ‰∫Ü
function killProcessOnPort(port) {
  try {
    if (process.platform === 'darwin' || process.platform === 'linux') {
      execSync(`lsof -ti :${port} | xargs kill -9`, { stdio: 'ignore' });
    } else if (process.platform === 'win32') {
      execSync(`for /f "tokens=5" %a in ('netstat -aon ^| find ":${port}"') do taskkill /F /PID %a`, { stdio: 'ignore' });
    }
  } catch (e) {
    // „Ç®„É©„Éº„ÅØÁÑ°Ë¶ñÔºà„Éó„É≠„Çª„Çπ„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„Å™„Å©Ôºâ
  }
}

// ÈÅÖÂª∂„ÇíËøΩÂä†
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function main() {
  console.log('MCP Inspector Ëµ∑ÂãïÊ∫ñÂÇô‰∏≠...\n');
  
  // „Éù„Éº„Éà„ÅÆÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  const inspectorAvailable = await isPortAvailable(INSPECTOR_PORT);
  const proxyAvailable = await isPortAvailable(PROXY_PORT);
  
  if (!inspectorAvailable || !proxyAvailable) {
    console.log('‚ö†Ô∏è  ‰ΩøÁî®‰∏≠„ÅÆ„Éù„Éº„Éà„ÇíÊ§úÂá∫„Åó„Åæ„Åó„Åü');
    
    if (!inspectorAvailable) {
      console.log(`  - „Éù„Éº„Éà ${INSPECTOR_PORT} „ÇíËß£Êîæ„Åó„Å¶„ÅÑ„Åæ„Åô...`);
      killProcessOnPort(INSPECTOR_PORT);
    }
    
    if (!proxyAvailable) {
      console.log(`  - „Éù„Éº„Éà ${PROXY_PORT} „ÇíËß£Êîæ„Åó„Å¶„ÅÑ„Åæ„Åô...`);
      killProcessOnPort(PROXY_PORT);
    }
    
    console.log('  ‚úÖ „Éù„Éº„Éà„ÇíËß£Êîæ„Åó„Åæ„Åó„Åü\n');
    
    // „Éù„Éº„ÉàËß£ÊîæÂæå„Å´Â∞ë„ÅóÂæÖÊ©ü
    await delay(1000);
  }
  
  // „Éì„É´„Éâ„ÇíÂÆüË°å
  console.log('üì¶ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí„Éì„É´„Éâ„Åó„Å¶„ÅÑ„Åæ„Åô...');
  try {
    execSync('npm run build', { stdio: 'inherit' });
    console.log('‚úÖ „Éì„É´„ÉâÂÆå‰∫Ü\n');
  } catch (error) {
    console.error('‚ùå „Éì„É´„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    process.exit(1);
  }
  
  // MCP Inspector„ÇíËµ∑Âãï
  console.log('üöÄ MCP Inspector „ÇíËµ∑Âãï„Åó„Å¶„ÅÑ„Åæ„Åô...\n');
  
  const serverPath = join(__dirname, '..', 'build', 'index.js');
  const args = [
    '@modelcontextprotocol/inspector',
    'node',
    serverPath
  ];
  
  // Áí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆöÔºà„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíÊäëÂà∂Ôºâ
  const env = {
    ...process.env,
    LOG_LEVEL: process.env.LOG_LEVEL || 'info',
    NODE_ENV: 'production'
  };
  
  const inspector = spawn('npx', args, {
    stdio: 'inherit',
    env
  });
  
  inspector.on('error', (error) => {
    console.error('‚ùå InspectorËµ∑Âãï„Ç®„É©„Éº:', error.message);
    process.exit(1);
  });
  
  inspector.on('exit', (code) => {
    if (code !== 0 && code !== null) {
      console.error(`\n‚ùå Inspector„ÅåÁï∞Â∏∏ÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü (code: ${code})`);
    }
    process.exit(code || 0);
  });
  
  // „Éó„É≠„Çª„ÇπÁµÇ‰∫ÜÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  process.on('SIGINT', () => {
    console.log('\n\nüëã MCP Inspector „ÇíÁµÇ‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åô...');
    inspector.kill('SIGTERM');
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    inspector.kill('SIGTERM');
    process.exit(0);
  });
}

// ÂÆüË°å
main().catch((error) => {
  console.error('‚ùå „Ç®„É©„Éº:', error.message);
  process.exit(1);
});